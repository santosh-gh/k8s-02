trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  serviceConnection: 'arm-svc-con'
  aksCluster: 'aks-onlinestore-dev-uksouth-001'
  aksResourceGroup: 'rg-onlinestore-dev-uksouth-001'
  acrName: 'acronlinestoredevuksouth001'
  namespace: 'default'
  imageTag: $(Build.BuildId)   
  imageName: 'order'

stages:
  - stage: Build
    displayName: Build and publish stage
    jobs:
      - job: BuildPublishDockerImages
        displayName: Build Publish Docker Images
        steps:
          - task: DockerInstaller@0
            displayName: Install Docker
            inputs:
              dockerVersion: '17.09.0-ce'

          - template: appTemplates/build.yml
            parameters:
              acrServiceConnection: $(serviceConnection)
              imageName: $(imageName)
              dockerFilePath: '$(Build.sourcesdirectory)/app/order-service/Dockerfile'
              tag: $(imageTag)

  - stage: PublishArtifact
    displayName: "Publish Pipeline Artifact"
    jobs:
      - job: PublishManifest
        displayName: "Publish Manifest"
        steps:
          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              path: 'manifests'

  - stage: Deploy
    jobs:
    - deployment: DeployAKS
      displayName: "Deploy AKS"
      environment: $(environment)
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: $(manifests)

              - script: |
                  echo "Workspace Directory: $(Pipeline.Workspace)"
                  ls -R "$(Pipeline.Workspace)"

              - task: AzureCLI@2
                displayName: Get AKS Credentials
                inputs:
                  azureSubscription: $(serviceConnection)
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    echo "Getting AKS credentials..."
                    az aks get-credentials --name $(aksCluster) --resource-group $(aksResourceGroup) --overwrite-existing

                    echo "Updating deployment files with image tags..."
                    sed -i "s|acronlinestoredevuksouth001.azurecr.io/order|$(acrName).azurecr.io/order:$(imageTag)|g" ./manifests/order-deployment.yml
                  
                    echo "Deploying to AKS..."
                    kubectl apply -f ./manifests/order-deployment.yml -n $(namespace)  
                    kubectl apply -f ./manifests/order-service.yml -n $(namespace) 

                    echo "Deployment completed."