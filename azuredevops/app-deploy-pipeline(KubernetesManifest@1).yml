trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  serviceConnection: 'arm-svc-con'
  aksCluster: 'aks-onlinestore-dev-uksouth-001'
  aksResourceGroup: 'rg-onlinestore-dev-uksouth-001'
  acrName: 'acronlinestoredevuksouth001'
  aksServiceConnection: 'aks-svc-connection'
  namespace: 'default'
  imageTag: $(Build.BuildId)

stages:
  - stage: PublishArtifact
    displayName: "Publish Pipeline Artifact"
    jobs:
      - job: PublishManifest
        displayName: "Publish Manifest"
        steps:
          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              path: 'manifests'  

  - stage: Deploy
    displayName: Deploy to AKS
    jobs:
    - job: Deploy
      displayName: Deploy
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: AzureCLI@2
        displayName: 'Azure CLI: Connect to AKS'
        inputs:
          azureSubscription: $(serviceConnection)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az account set --subscription 'b798c28b-e334-4ecf-b338-ec314ced3616'
            az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksCluster) --overwrite-existing

            echo "Updating deployment files with image tags..."
            sed -i "s|acronlinestoredevuksouth001.azurecr.io/order|$(acrName).azurecr.io/order:$(imageTag)|g" ./manifests/order-deployment.yml
            sed -i "s|acronlinestoredevuksouth001.azurecr.io/product|$(acrName).azurecr.io/product:$(imageTag)|g" ./manifests/product-deployment.yml
            sed -i "s|acronlinestoredevuksouth001.azurecr.io/store-front|$(acrName).azurecr.io/store-front:$(imageTag)|g" ./manifests/store-front-deployment.yml

      # - task: Kubernetes@1
      #   displayName: 'kubectl apply'
      #   inputs:
      #     connectionType: 'Kubernetes Service Connection'
      #     kubernetesServiceEndpoint: $(aksServiceConnection)
      #     namespace: $(namespace)
      #     command: apply
      #     arguments: '-f ./manifests'
      #     # or, if using a single manifest file
      #     # arguments: '-f ./manifests/all-in-one.yaml'
      
      - task: KubernetesManifest@1
        displayName: Deploy Service A to AKS
        inputs:
          action: 'deploy'
          kubernetesServiceConnection: $(aksServiceConnection)
          namespace: $(namespace)
          manifests: |
            ./manifests
          rolloutStatusTimeout: '300'